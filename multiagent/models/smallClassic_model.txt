Playing on smallClassic
Took 353.72300005 seconds to train

Real Games info:
('Average Score:', -8.5)
('Scores:       ', '21.0, -330.0, -408.0, 882.0, -400.0, -290.0, 1089.0, -187.0, -66.0, -396.0')
Win Rate:      2/10 (0.20)
('Record:       ', 'Loss, Loss, Loss, Win, Loss, Loss, Win, Loss, Loss, Loss')

Training info:
Total number of simulations run: 1000
Total number of literal wins: 0
Use win threshold: False
Total number of effective wins: 0
Final win threshold: -9999999
Average score: -452.412
Total number of nodes: 4271

Number of states you saw in real games which you had not seen in training: 87
States you saw in real games which you had not seen in training:

{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 4, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 4, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 4, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 3, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': 4, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 3, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}
{'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}
{'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}

Data:

({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-243.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=60, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=67, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=69, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=204, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=46, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=41, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=78, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=32, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=98, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=57, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-453.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=36, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=443, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=115, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-392.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=217, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-531.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=54, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=77, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=69, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-239.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=62, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=57, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-368.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-674.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=56, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=40, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-535.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=32, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=32, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=67, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=98, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=48, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-483.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=28, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=73, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=44, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=45, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=44, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=34, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=50, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=170, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=70, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=62, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-453.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=62, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=121, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-535.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=204, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=115, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-674.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-397.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-243.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=40, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-482.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=57, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=34, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=90, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=89, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=62, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=39, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=89, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=82, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=57, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-392.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=443, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-674.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=50, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=121, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-412.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=204, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-535.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-399.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-491.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=28, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=69, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=76, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=84, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=99, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=89, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=45, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-399.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=49, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=90, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-397.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-453.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=82, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=115, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-674.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-439.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=98, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=93, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=42, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-239.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=83, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=37, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=99, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-412.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=40, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-512.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-368.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-481.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=73, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-239.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=45, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=45, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=170, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=82, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=50, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=28, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=32, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=78, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=88, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=46, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=63, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=39, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=90, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=89, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-481.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-476.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=41, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=42, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-512.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=28, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-453.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=23, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=55, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=40, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=58, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=41, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=44, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=36, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=170, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=57, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=46, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-512.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=70, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=129, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=74, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=88, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=84, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-458.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=229, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-486.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=63, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=29, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=129, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=37, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=89, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=33, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=30, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=66, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-482.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-243.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-491.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=27, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-392.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=46, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=98, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=83, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-296.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-476.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=83, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-415.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-345.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=129, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=76, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-392.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=82, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-399.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-197.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=84, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=13, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-364.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-512.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=55, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=41, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-460.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-436.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=37, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=88, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-472.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-399.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=32, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-420.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-228.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-382.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=443, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-15.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-397.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=49, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-416.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-378.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=83, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-239.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=39, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=216, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-349.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=229, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-471.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-401.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=20, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-479.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-518.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-392.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-361.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-418.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=34, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=91, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-443.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-367.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=120, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=69, listOfWinTuples=[WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-243.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-163.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-482.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-510.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-485.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-370.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-449.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-415.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=25, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=84, listOfWinTuples=[WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-399.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-424.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=54, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-518.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-674.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-378.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-465.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-480.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-531.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=18, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=216, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-276.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=229, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-368.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-353.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-217.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=84, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-436.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-512.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-238.0), WinTuple(didWin=False, score=-491.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-448.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-416.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-412.0), WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-514.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-267.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-441.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-404.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-397.0), WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=15, listOfWinTuples=[WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=22, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-392.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-403.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=19, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-438.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-439.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-378.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-28.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-163.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-459.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-417.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-455.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-407.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-183.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-148.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-540.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-238.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-377.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-478.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-319.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=35, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-528.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-414.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-538.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-431.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-421.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-357.0), WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-430.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-402.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-228.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-31.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-538.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-390.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-421.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-376.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=61, listOfWinTuples=[WinTuple(didWin=False, score=-404.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-409.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-414.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-473.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-454.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-357.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-360.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-358.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-420.0), WinTuple(didWin=False, score=-186.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-280.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-197.0), WinTuple(didWin=False, score=-380.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-239.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-462.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-457.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=12, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-438.0), WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-488.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=31, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-516.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-446.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-447.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-370.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-400.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-10.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-463.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-387.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-428.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-461.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=43, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-242.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-215.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.5, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-442.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=17, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-492.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-427.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-280.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-353.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-540.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-445.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=11, listOfWinTuples=[WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-159.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-464.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=8, listOfWinTuples=[WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-199.0), WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-409.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-15.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-437.0), WinTuple(didWin=False, score=-456.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-374.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-441.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-451.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=26, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-319.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-28.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-405.0), WinTuple(didWin=False, score=-367.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-374.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=61, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-400.0), WinTuple(didWin=False, score=-217.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-443.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-393.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-179.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-424.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-513.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-377.0), WinTuple(didWin=False, score=-403.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-433.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-296.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=93, listOfWinTuples=[WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-535.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-413.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-525.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-430.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-349.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-417.0), WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-390.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-57.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-466.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-159.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-57.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-544.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-435.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-260.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-447.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-183.0), WinTuple(didWin=False, score=-467.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-186.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-10.0), WinTuple(didWin=False, score=-411.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-435.0), WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-674.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=78, listOfWinTuples=[WinTuple(didWin=False, score=-465.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-458.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-519.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-267.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-422.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-489.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-427.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-475.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-469.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=94, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-485.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-406.0), WinTuple(didWin=False, score=-459.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-360.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-483.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-449.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-89.0), WinTuple(didWin=False, score=-490.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-476.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-455.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-531.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-479.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-462.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-364.0), WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-376.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-252.0), WinTuple(didWin=False, score=-532.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-426.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-448.0), WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-215.0), WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-387.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-446.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-369.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-260.0), WinTuple(didWin=False, score=-432.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-358.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-454.0), WinTuple(didWin=False, score=-382.0), WinTuple(didWin=False, score=-252.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-470.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-532.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-410.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-544.0), WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-440.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-457.0), WinTuple(didWin=False, score=-31.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-423.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-490.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-89.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.5, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-405.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-493.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-397.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-468.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-247.0), WinTuple(didWin=False, score=-470.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-419.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-413.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-366.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=16, listOfWinTuples=[WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-492.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-401.0), WinTuple(didWin=False, score=-475.0), WinTuple(didWin=False, score=-510.0), WinTuple(didWin=False, score=-474.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-468.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-247.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=54, listOfWinTuples=[WinTuple(didWin=False, score=-469.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-478.0), WinTuple(didWin=False, score=-442.0), WinTuple(didWin=False, score=-467.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-453.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-460.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-423.0), WinTuple(didWin=False, score=-473.0), WinTuple(didWin=False, score=-402.0), WinTuple(didWin=False, score=-487.0), WinTuple(didWin=False, score=-419.0), WinTuple(didWin=False, score=-434.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-418.0), WinTuple(didWin=False, score=-450.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-511.0), WinTuple(didWin=False, score=-380.0), WinTuple(didWin=False, score=-431.0), WinTuple(didWin=False, score=-534.0), WinTuple(didWin=False, score=-472.0), WinTuple(didWin=False, score=-466.0), WinTuple(didWin=False, score=-480.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-474.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-491.0), WinTuple(didWin=False, score=-481.0), WinTuple(didWin=False, score=-493.0), WinTuple(didWin=False, score=-471.0), WinTuple(didWin=False, score=-411.0), WinTuple(didWin=False, score=-463.0), WinTuple(didWin=False, score=-451.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-482.0), WinTuple(didWin=False, score=-484.0), WinTuple(didWin=False, score=-486.0), WinTuple(didWin=False, score=-456.0), WinTuple(didWin=False, score=-477.0), WinTuple(didWin=False, score=-369.0), WinTuple(didWin=False, score=-445.0), WinTuple(didWin=False, score=-422.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-407.0), WinTuple(didWin=False, score=-437.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.5, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-484.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-276.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=5, listOfWinTuples=[WinTuple(didWin=False, score=-433.0), WinTuple(didWin=False, score=-366.0), WinTuple(didWin=False, score=-361.0), WinTuple(didWin=False, score=-148.0), WinTuple(didWin=False, score=-444.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=6, listOfWinTuples=[WinTuple(didWin=False, score=-461.0), WinTuple(didWin=False, score=-444.0), WinTuple(didWin=False, score=-410.0), WinTuple(didWin=False, score=-488.0), WinTuple(didWin=False, score=-440.0), WinTuple(didWin=False, score=-452.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-428.0), WinTuple(didWin=False, score=-242.0), WinTuple(didWin=False, score=-199.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-179.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-393.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-434.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-426.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-345.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': None, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-432.0), WinTuple(didWin=False, score=-452.0), WinTuple(didWin=False, score=-464.0), WinTuple(didWin=False, score=-423.0)])
