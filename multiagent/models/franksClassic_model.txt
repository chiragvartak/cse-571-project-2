Playing on franksClassic
Took 2.28200006485 seconds to train

Real Games info:
('Average Score:', 516.0)
('Scores:       ', '516.0, 516.0, 516.0, 516.0, 516.0, 516.0, 516.0, 516.0, 516.0, 516.0')
Win Rate:      10/10 (1.00)
('Record:       ', 'Win, Win, Win, Win, Win, Win, Win, Win, Win, Win')

Training info:
Total number of simulations run: 100
Total number of literal wins: 40
Use win threshold: True
Total number of effective wins: 40
Final win threshold: 516.0
Average score: -96.03
Total number of nodes: 315

Number of states you saw in real games which you had not seen in training: 0
States you saw in real games which you had not seen in training:


Data:

({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=512.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=3, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=10, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=5, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=3, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=4, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=6, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=True, score=512.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=True, score=512.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=6, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=515.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=515.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=8, nSimulations=26, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=514.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=3, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=9, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'North'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=491.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=513.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=514.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=515.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=503.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=503.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=503.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=4, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=11, nSimulations=21, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=7, nSimulations=14, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=509.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=509.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=True, score=512.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=3, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=5, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=7, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-524.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=3, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=3, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=4, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=503.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=2, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=509.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=3, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=2, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-517.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=6, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=510.0), WinTuple(didWin=True, score=506.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=7, nSimulations=24, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-520.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-524.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=510.0), WinTuple(didWin=True, score=506.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': None, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=3, nSimulations=10, listOfWinTuples=[WinTuple(didWin=False, score=-505.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=4, nSimulations=7, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=3, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=505.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=8, nSimulations=11, listOfWinTuples=[WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=4, nSimulations=9, listOfWinTuples=[WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-506.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-494.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=7, nSimulations=17, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=515.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-520.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=8, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=514.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'South'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=503.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=506.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-504.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=4, listOfWinTuples=[WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=4, nSimulations=6, listOfWinTuples=[WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=503.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-501.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=510.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-498.0)])
({'directionToNearestFood': 135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'South'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-501.0), WinTuple(didWin=False, score=-499.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=3, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0), WinTuple(didWin=False, score=-496.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-503.0)])
({'directionToNearestFood': 45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-507.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-502.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=514.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-520.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=False, score=-520.0), WinTuple(didWin=False, score=-504.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': -90, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'Stop'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-497.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': 45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-505.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=25, nSimulations=50, listOfWinTuples=[WinTuple(didWin=True, score=516.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=507.0), WinTuple(didWin=True, score=505.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=515.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-502.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-497.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=513.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-507.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-503.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-494.0), WinTuple(didWin=False, score=-505.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=510.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=False, score=-496.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=True, score=511.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0), WinTuple(didWin=True, score=516.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-496.0), WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 135, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'North'): ModelEntry(nWins=3, nSimulations=5, listOfWinTuples=[WinTuple(didWin=True, score=509.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-499.0), WinTuple(didWin=True, score=509.0), WinTuple(didWin=False, score=-509.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': False}, 'West'): ModelEntry(nWins=1, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=506.0), WinTuple(didWin=False, score=-506.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -45, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': False, 'canMoveEast': False}, 'South'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-524.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-508.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 2, 'distanceToNearestFood': 1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=4, listOfWinTuples=[WinTuple(didWin=False, score=-500.0), WinTuple(didWin=True, score=512.0), WinTuple(didWin=False, score=-498.0), WinTuple(didWin=False, score=-495.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -45, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=506.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -45, 'nearestGhostEdible': None, 'distanceToNearestGhost': 1.0, 'directionToNearestGhost': 0, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=0, nSimulations=2, listOfWinTuples=[WinTuple(didWin=False, score=-495.0), WinTuple(didWin=False, score=-500.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 3.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=2, nSimulations=2, listOfWinTuples=[WinTuple(didWin=True, score=513.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'Stop'): ModelEntry(nWins=3, nSimulations=3, listOfWinTuples=[WinTuple(didWin=True, score=503.0), WinTuple(didWin=True, score=491.0), WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': 0, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 0, 'canMoveNorth': True, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': False, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-517.0)])
({'directionToNearestFood': 180, 'nearestGhostEdible': None, 'distanceToNearestGhost': 4.0, 'directionToNearestGhost': -135, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -90, 'nearestGhostEdible': None, 'distanceToNearestGhost': 2.0, 'directionToNearestGhost': -90, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': 1, 'canMoveSouth': True, 'canMoveWest': True, 'canMoveEast': True}, 'West'): ModelEntry(nWins=1, nSimulations=1, listOfWinTuples=[WinTuple(didWin=True, score=511.0)])
({'directionToNearestFood': -135, 'nearestGhostEdible': None, 'distanceToNearestGhost': 5.0, 'directionToNearestGhost': 180, 'canMoveNorth': False, 'numberOfFoods': 1, 'distanceToNearestFood': -1, 'canMoveSouth': False, 'canMoveWest': True, 'canMoveEast': True}, 'East'): ModelEntry(nWins=0, nSimulations=1, listOfWinTuples=[WinTuple(didWin=False, score=-503.0)])
